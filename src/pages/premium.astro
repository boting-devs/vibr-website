---
import Nav from "../components/Nav.astro";
import Price from "../components/Price.astro";

import { stripe, ProductMetadata } from "../global";
import type { Stripe } from "stripe";

type CombinedProduct = [
  Stripe.Response<Stripe.Product>,
  // "or $n annually"
  Stripe.Price[],
  // "or $n for 24/7 added"
  Stripe.Response<Stripe.Product> | undefined
];

const MAIN_PRODUCT_IDS = [
  // 24/7
  "prod_OAh9S7fYS9xtW2",
  // Extra Bot (+ 27/7 extra)
  "prod_OAjNULUFdb4wm4",
  // Extra Bot (+ 24/7 extra) x 3
  "prod_OAjVfM0q1tmWnQ",
];
const productPromises = MAIN_PRODUCT_IDS.map(
  async (product_id): Promise<CombinedProduct> => {
    const product = await stripe.products.retrieve(product_id, {
      expand: ["default_price"],
    });
    const metadata = product.metadata as unknown as ProductMetadata;
    let extra_product;
    if (metadata.extra_product) {
      extra_product = await stripe.products.retrieve(metadata.extra_product, {
        expand: ["default_price"],
      });
    }

    // Get more than default_price
    const extra_prices = (
      await stripe.prices.search({ query: `product:"${product.id}"` })
    ).data.filter((price) => price.id !== (product.default_price as Stripe.Price).id);

    return [product, extra_prices, extra_product];
  }
);

const products = await Promise.all(productPromises);
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vibr | Premium</title>
  </head>
  <body class="bg-grey-200 text-white h-screen">
    <Nav />
    <section>
      <h1
        class="mb-7 md:mb-14 mx-2 text-center text-2xl md:text-3xl mt-10 text-teal-900"
      >
        Get some great perks while supporting the bot!
      </h1>
      <div class="flex flex-wrap justify-center">
        {
          products.map(([product, _extra_prices, extra_product]) => (
            <Price {product} {extra_product} />
          ))
        }
      </div>
    </section>
  </body>
</html>
